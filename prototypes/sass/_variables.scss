// =================================================
// Variables and Mixins
// Version: 1.0
// =================================================

// 1. TYPOGRAPHY -----------------------------------

$base-font	: 16;
$base-lh		: 24;
$serif-ff		: "ff-tisa-web-pro", Georgia, serif;
$sans-ff    : "proxima-nova", Corbel, sans-serif;
$title-font	: "adelle", Georgia, serif;
$code-font	: "DejaVu Sans Mono", Consolas, Menlo, "Courier New", monospace, sans-serif;

// Convert Pixels to EMs (Desired = Target / Context)
@function em($target, $context: $base-font){
	@if $target == 0 {@return 0}
	@return $target / $context + 0em;
}

// Maintain vertical rhythm with Line Height - '$amount' can be used as a multipler
@function lh($amount: 1, $context: $base-lh){
	@return em($base-lh * $amount, $context)
}

// This assumes font-size = 62.5% on html element
@mixin rem($size) {
  font-size: $size + px;
  font-size: ($size / 10) + rem;
}


// 2. COLOR ----------------------------------------

$bodycolor	      : #fdf6e3; // base3
$textcolor	      : #073642; // base02
$lightcolor	      : #586e75; // base01
$titlecolor	      : #2aa198; // cyan
$codecolor	      : #859900; // green

$linkcolor			  : #002b36; // base03
$linkcolorvisited	: #6c71c4; // violet
$linkcolorhover		: #268bd2; // blue
$linkcolorfocus		: darken($linkcolorhover, 10%)

$accentcolor		  : #eee8d5; // base2
$accentborder		  : #657b83; // base00

		// -- SOLARIZED --
		// base03:    #002b36; 
		// base02:    #073642; 
		// base01:    #586e75;
		// base00:    #657b83;
		// base0:     #839496;
		// base1:     #93a1a1;
		// base2:     #eee8d5; 
		// base3:     #fdf6e3;
		// yellow:    #b58900;
		// orange:    #cb4b16;
		// red:       #dc322f;
		// magenta:   #d33682;
		// violet:    #6c71c4;
		// blue:      #268bd2;
		// cyan:      #2aa198;
		// green:     #859900;
		
// 3. GRID ----------------------------------------

$col_tot: 12;
$column: 58px;
$gutter: 24px;

$max-width: (($col_tot * ($column + $gutter))- $gutter);
$margin: $gutter / 2;

// Use for elements that are children of the max-width element (wrap)
@mixin col($no-cols, $parent-width: $max-width){
	width: percentage(($no-cols * ($column + $gutter) - $gutter) / $parent-width);
}

// Use for sub-elements, as their width is determined by their parent element
@mixin subcol($no-cols, $parent-columns){
  width: percentage(($no-cols * ($column + $gutter) - $gutter) / (($parent-columns * ($column + $gutter))- $gutter));
  }

// Creates the main content elements, with floats and right margins
@mixin col-fl($no-cols, $parent-width: $max-width){
	float: left;
	width: percentage(($no-cols * ($column + $gutter) - $gutter) / $parent-width);
	margin-right: percentage($gutter / $parent-width);
}

// Pushes a floated element right with a large left margin (full-article)
@mixin push($no-cols, $no-gutter){
  margin-left: percentage((($no-cols * $column)+($no-gutter * $gutter)) / $max-width);
  }
  
// Sort of tricky...used by elements such as .meta, .sidenote, that are pulled left into
//   left margin created by 'push' mixin above.
// BP is the left edge of element is pulled it's own width plus one gutter
// Negative margin % = Element width + 1 gutter / Parent width, hence 'no-col' (without 
//     subtracting one gutter) variable to determine element width and 'parent-cols' to 
//     determine likewise
@mixin pull($no-cols, $parent-columns){
  margin-left: (percentage($no-cols * ($column + $gutter) / (($parent-columns * ($column + $gutter))- $gutter))) * -1;
  }

@mixin clearfix {
  *zoom:1;
  &:before, &:after {content: ""; display:table;}
  &:after {clear:both;}
  }
  
  
// 4. HELPER CLASSES ------------------------------

  
// TODO: Need to move this to _layout partial 
.ir {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
  }
  
@mixin hide-text {
  background-color: transparent;
  border:           0;
  color:            transparent;
  font:             0/0 a;
  text-shadow:      none;
}
